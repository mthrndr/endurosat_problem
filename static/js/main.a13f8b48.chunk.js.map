{"version":3,"sources":["PowerContext.jsx","components/ParameterDisplay.jsx","components/NotificationsPanel.jsx","components/CommandPanel.jsx","App.js","reportWebVitals.js","index.js"],"names":["PowerContext","createContext","PowerContextProvider","children","useState","voltage","current","power","setPower","useEffect","timer","setInterval","newPower","pos","parseFloat","toFixed","updateValues","clearInterval","Provider","value","ParameterDisplay","type","id","useContext","NotificationsPanel","CommandPanel","ControlPanel","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAEMA,EAAeC,wBAAc,IAI5B,SAASC,EAAT,GAA2C,IAAXC,EAAU,EAAVA,SAAU,EACrBC,mBAAS,CACjCC,QAAS,CAAC,EAAE,GACZC,QAAS,CAAC,EAAE,KAHiC,mBACxCC,EADwC,KACjCC,EADiC,KAuB/C,OAPAC,qBAAU,WACR,IAAMC,EAAQC,aAAY,YAXP,WACnB,IAAMC,EAAWL,EACjB,IAAK,IAAIM,KAAOD,EAASP,QACvBO,EAASP,QAAQQ,IAAQD,EAASP,QAAQQ,GAAO,GAZnC,GAadD,EAASN,QAAQO,GAAOC,aAAaF,EAASN,QAAQO,GAAO,IAZ/C,GAYmEE,QAAQ,IAE3FP,EAAS,eAAII,IAMXI,KACC,KACH,OAAO,kBAAMC,cAAcP,OAI3B,cAACV,EAAakB,SAAd,CAAuBC,MAAO,CAACZ,SAA/B,SACGJ,IAKQH,QCnBAoB,MAdf,YAAuC,IAAZC,EAAW,EAAXA,KAAMC,EAAK,EAALA,GACxBf,EAASgB,qBAAWvB,GAApBO,MACP,OACE,qCACE,6BACG,uBAEH,4BACGA,EAAMc,GAAMC,SCDNE,MARf,WACE,OACE,+DCMWC,MARf,WACE,OACE,yDCKJ,SAASC,IAEP,OACE,gCACE,cAAC,EAAD,CAAkBL,KAAK,UAAUC,GAAG,MACpC,cAAC,EAAD,CAAkBD,KAAK,UAAUC,GAAG,MACpC,cAAC,EAAD,CAAkBD,KAAK,UAAUC,GAAG,MACpC,cAAC,EAAD,CAAkBD,KAAM,UAAUC,GAAG,MACrC,cAAC,EAAD,IACA,cAAC,EAAD,OAgBSK,MAXf,WACE,OACE,cAACzB,EAAD,UACE,sBAAK0B,UAAU,MAAf,iBAEE,cAACF,EAAD,UChBOG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a13f8b48.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nconst PowerContext = createContext('');\nconst MAX_VOLTAGE = 30;\nconst MAX_CURRENT = 4;\n\nexport function PowerContextProvider ({children}){\n  const [power, setPower] = useState({\n    voltage: [1,2],\n    current: [1,2],\n  });\n  \n  const updateValues = () => {\n    const newPower = power;\n    for (let pos in newPower.voltage){\n      newPower.voltage[pos] = (newPower.voltage[pos] + 1) % MAX_VOLTAGE;\n      newPower.current[pos] = parseFloat(((newPower.current[pos] + 0.1) % MAX_CURRENT).toFixed(1));\n    }\n    setPower({...newPower});\n    return newPower;\n  }\n  \n  useEffect(() => {\n    const timer = setInterval(() => {\n      updateValues();\n    }, 1000);\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <PowerContext.Provider value={{power}}>\n      {children}\n    </PowerContext.Provider>\n  )\n}\n\nexport default PowerContext;\n","import React, { useContext } from 'react';\nimport PowerContext from '../PowerContext';\n\nfunction ParameterDisplay({type, id}) {\n  const {power} = useContext(PowerContext);\n  return (\n    <>\n      <h3>\n        {'I am a parameter: '}\n      </h3>\n      <p>\n        {power[type][id]}\n      </p> \n    </>\n  );\n}\n\nexport default ParameterDisplay;\n","import React from 'react';\n\nfunction NotificationsPanel() {\n  return (\n    <h3>\n      I am the notifications panel\n    </h3>\n  );\n}\n\nexport default NotificationsPanel;\n","import React from 'react';\n\nfunction CommandPanel() {\n  return (\n    <h3>\n      I am the command panel\n    </h3>\n  );\n}\n\nexport default CommandPanel;\n","import React from 'react';\n\nimport './App.css';\nimport ParameterDisplay from './components/ParameterDisplay';\nimport NotificationsPanel from './components/NotificationsPanel';\nimport CommandPanel from './components/CommandPanel';\n\nimport { PowerContextProvider } from './PowerContext';\n\nfunction ControlPanel () {\n\n  return(\n    <div>\n      <ParameterDisplay type='voltage' id='0'/>\n      <ParameterDisplay type='voltage' id='1'/>\n      <ParameterDisplay type='current' id='0'/>\n      <ParameterDisplay type ='current' id='1'/>\n      <CommandPanel />\n      <NotificationsPanel />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <PowerContextProvider>\n      <div className=\"App\">\n        test\n        <ControlPanel />\n      </div>\n    </PowerContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}