{"version":3,"sources":["PowerContext.jsx","components/ParameterDisplay.jsx","components/NotificationsPanel.jsx","components/CommandPanel.jsx","App.js","reportWebVitals.js","index.js"],"names":["PowerContext","createContext","PowerContextProvider","children","useState","voltage","current","connected","power","setPower","useEffect","timer","setInterval","newPower","pos","parseFloat","toFixed","updateValues","clearInterval","Provider","value","toggleConnection","id","ParameterDisplay","type","useContext","disconnectedAlert","className","lowVoltageAlert","highCurrentAlert","veryHighCurrentAlert","getNotifications","Notifications","push","NotificationsPanel","connectionButton","onClick","getCommandOptions","Commands","CommandPanel","ControlPanel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba1502b1.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nconst PowerContext = createContext('');\nconst MAX_VOLTAGE = 30;\nconst MAX_CURRENT = 4;\n\nexport function PowerContextProvider ({children}){\n  const [power, setPower] = useState({\n    voltage: [18,21],\n    current: [1,2],\n    connected: [true, true],\n  });\n  \n  function updateValues() {\n    const newPower = power;\n    for (let pos in newPower.voltage){\n      if(newPower.connected[pos]){\n        newPower.current[pos] = parseFloat(((newPower.current[pos] + 0.1) % MAX_CURRENT).toFixed(1));\n      }\n      newPower.voltage[pos] = (newPower.voltage[pos] + 1) % MAX_VOLTAGE;\n    }\n    setPower({...newPower});\n    return newPower;\n  }\n \n  function toggleConnection(id){\n  const newPower = power;\n  newPower.connected[id] = !newPower.connected[id];\n  if(newPower.connected[id]){\n    newPower.current[id] = 2;\n  } else {\n    newPower.current[id] = 0;\n  }\n  setPower({...newPower});\n  }\n \n  useEffect(() => {\n    const timer = setInterval(() => {\n      updateValues();\n    }, 1000);\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <PowerContext.Provider value={{power, toggleConnection}}>\n      {children}\n    </PowerContext.Provider>\n  )\n}\n\nexport default PowerContext;\n","import React, { useContext } from 'react';\nimport PowerContext from '../PowerContext';\n\nfunction ParameterDisplay({type, id}) {\n  const {power} = useContext(PowerContext);\n  return (\n    <>\n      <h3>\n        {`Displaying ${type} on rack ${id}`}\n      </h3>\n      <p>\n        {power[type][id]}\n      </p> \n    </>\n  );\n}\n\nexport default ParameterDisplay;\n","import React, { useContext } from 'react';\nimport PowerContext from '../PowerContext';\n\nfunction disconnectedAlert(pos){\n  return(\n    <div className=\"alert\">\n      {`Rack ${pos} has been disconnected!`}\n    </div>\n  );\n}\n\nfunction lowVoltageAlert(pos){\n  return(\n    <div className=\"alert\">\n      {`Low voltage on rack ${pos}!`}\n    </div>\n  );\n}\n\nfunction highCurrentAlert(pos){\n  return(\n    <div className=\"alert\">\n      {`High current on rack ${pos}!`}\n    </div>\n  );\n}\n\nfunction veryHighCurrentAlert(pos){\n  return(\n    <div className=\"alert\">\n      {`Very high current on rack ${pos}!`}\n    </div>\n  );\n}\n\nfunction getNotifications(power){\n  let Notifications = [];\n  if (power){\n    for (let pos in power.voltage){\n      if (power.voltage[pos] < 18){\n        Notifications.push(lowVoltageAlert(pos));\n      }\n      if (power.connected[pos]){\n        if (power.current[pos] > 3){\n          Notifications.push(veryHighCurrentAlert(pos));\n        } else if (power.current[pos] > 2.5){\n          Notifications.push(highCurrentAlert(pos));\n        }\n      } else {\n        Notifications.push(disconnectedAlert(pos));\n      }\n    }\n  }\n  return Notifications;\n}\n\nfunction NotificationsPanel() {\n  const {power} = useContext(PowerContext);\n  return (\n    <div className=\"Notifications_Panel\">\n      <h3>\n        Notifications\n      </h3>\n      {getNotifications(power)}\n    </div>\n  );\n}\n\nexport default NotificationsPanel;\n","import React, { useContext } from 'react';\nimport PowerContext from '../PowerContext';\n\nfunction connectionButton(pos, toggleConnection){\n  return(\n    <button onClick={() => {\n      toggleConnection(pos);\n      }}\n    >\n      {`Toggle Connection on pack ${pos}`}\n    </button>\n  );\n}\n\nfunction getCommandOptions(connected, toggleConnection){\n  let Commands = [];\n    for(let pos in connected){\n      Commands.push(connectionButton(pos, toggleConnection));\n    }\n  return Commands;\n};\n\nfunction CommandPanel() {\n  const {power, toggleConnection} = useContext(PowerContext);\n  return (\n    <div className=\"panel\">\n      <h3>\n        Command Panel\n      </h3>\n      {getCommandOptions(power.connected, toggleConnection)}\n    </div>\n  );\n}\n\nexport default CommandPanel;\n","import React from 'react';\n\nimport './App.css';\nimport ParameterDisplay from './components/ParameterDisplay';\nimport NotificationsPanel from './components/NotificationsPanel';\nimport CommandPanel from './components/CommandPanel';\n\nimport { PowerContextProvider } from './PowerContext';\n\nfunction ControlPanel () {\n\n  return(\n    <div>\n      <ParameterDisplay type='voltage' id='0'/>\n      <ParameterDisplay type='voltage' id='1'/>\n      <ParameterDisplay type='current' id='0'/>\n      <ParameterDisplay type ='current' id='1'/>\n      <CommandPanel />\n      <NotificationsPanel />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <PowerContextProvider>\n      <div className=\"App\">\n        Satellite Information\n        <ControlPanel />\n      </div>\n    </PowerContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}